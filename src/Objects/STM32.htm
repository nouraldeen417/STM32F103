<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STM32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STM32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 05 15:22:44 2024
<BR><P>
<H3>Maximum Stack Usage =         52 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
myFunc &rArr; LCD_voidSendNumber &rArr; LCD_voidSendData &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[39]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_2_IRQHandler</a> from adc_program.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[25]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel1_IRQHandler</a> from dma_program.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel2_IRQHandler</a> from dma_program.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel3_IRQHandler</a> from dma_program.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel4_IRQHandler</a> from dma_program.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel5_IRQHandler</a> from dma_program.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel6_IRQHandler</a> from dma_program.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[20]">DMA1_Channel7_IRQHandler</a> from dma_program.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from exti_program.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from exti_program.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from exti_program.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from exti_program.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from exti_program.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from exti_program.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from exti_program.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[10]">PVD_IRQHandler</a> from exti_program.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from exti_program.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from rtc_program.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[37]">Reset_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from spi_progrm.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from systick_program.o(i.SysTick_Handler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from timers_program.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[28]">TIM1_UP_IRQHandler</a> from timers_program.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from timers_program.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from timers_program.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from usart_program.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from usart_program.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from exti_program.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[22]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[23]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_stm32f10x_ld.o(.text) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from timers_program.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_ld.o(RESET)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_ld.o(.text)
 <LI><a href="#[3]">myFunc</a> from main.o(i.myFunc) referenced 6 times from main.o(.data)
 <LI><a href="#[4]">myFunc2</a> from main.o(i.myFunc2) referenced 4 times from main.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[63]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[64]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[65]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[66]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[67]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[41]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[68]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[69]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[70]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[71]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[72]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[73]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[74]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[75]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[77]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[78]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[79]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[46]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[7f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[84]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[85]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[42]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; USART_enumSendData_DMA &rArr; DMA_enumInitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[45]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[47]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[37]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[22]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_ld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_ld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[44]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[8d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, adc_program.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DIO_enumSetPinDirection</STRONG> (Thumb, 586 bytes, Stack size 20 bytes, dio_program.o(i.DIO_enumSetPinDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DIO_enumSetPinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>DIO_enumSetPinValue</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, dio_program.o(i.DIO_enumSetPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DIO_enumSetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendFallinEdge
</UL>

<P><STRONG><a name="[51]"></a>DIO_enumSetPortNibble</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, dio_program.o(i.DIO_enumSetPortNibble))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DIO_enumSetPortNibble
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
</UL>

<P><STRONG><a name="[62]"></a>DIO_enumTogglePinValue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dio_program.o(i.DIO_enumTogglePinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DIO_enumTogglePinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFunc
</UL>

<P><STRONG><a name="[1a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dma_program.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA_enumEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dma_program.o(i.DMA_enumEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_enumEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumSendData_DMA
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumRecevieData_DMA
</UL>

<P><STRONG><a name="[59]"></a>DMA_enumInitConfig</STRONG> (Thumb, 644 bytes, Stack size 12 bytes, dma_program.o(i.DMA_enumInitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_enumInitConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumSendData_DMA
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumRecevieData_DMA
</UL>

<P><STRONG><a name="[61]"></a>DMA_enumWait_TCIF_Flag</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dma_program.o(i.DMA_enumWait_TCIF_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_enumWait_TCIF_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, exti_program.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, exti_program.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LCD_voidDisplayClear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_program.o(i.LCD_voidDisplayClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_voidDisplayClear &rArr; LCD_voidSendCommand &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_enumSetBusyWait
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidInit
</UL>

<P><STRONG><a name="[4e]"></a>LCD_voidInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lcd_program.o(i.LCD_voidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_voidInit &rArr; LCD_voidDisplayClear &rArr; LCD_voidSendCommand &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_enumSetBusyWait
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPinDirection
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidDisplayClear
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>LCD_voidSendCommand</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd_program.o(i.LCD_voidSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_voidSendCommand &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_enumSetBusyWait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPortNibble
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPinValue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendFallinEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidDisplayClear
</UL>

<P><STRONG><a name="[53]"></a>LCD_voidSendData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd_program.o(i.LCD_voidSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_voidSendData &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_enumSetBusyWait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPortNibble
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPinValue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendFallinEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendNumber
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFunc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>LCD_voidSendNumber</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd_program.o(i.LCD_voidSendNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_voidSendNumber &rArr; LCD_voidSendData &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFunc
</UL>

<P><STRONG><a name="[5e]"></a>NVIC_enumInterruptEnable</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, nvic_program.o(i.NVIC_enumInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_enumInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RCC_voidADCSetPresacaler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rcc_program.o(i.RCC_voidADCSetPresacaler))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>RCC_voidEnableClock</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rcc_program.o(i.RCC_voidEnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.RTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCAlarm_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc_program.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi_progrm.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SYSTICK_enumSetBusyWait</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, systick_program.o(i.SYSTICK_enumSetBusyWait))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidDisplayClear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendFallinEdge
</UL>

<P><STRONG><a name="[55]"></a>SYSTICK_voidDesable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, systick_program.o(i.SYSTICK_voidDesable))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5d]"></a>SYSTICK_voidInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick_program.o(i.SYSTICK_voidInit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick_program.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_voidDesable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, timers_program.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers_program.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, timers_program.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, timers_program.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, usart_program.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, usart_program.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART_enumInitConfig</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usart_program.o(i.USART_enumInitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_enumInitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumGetBaseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>USART_enumRecevieData_DMA</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usart_program.o(i.USART_enumRecevieData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART_enumRecevieData_DMA &rArr; DMA_enumInitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_enumInitConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_enumEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumGetBaseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>USART_enumSendData_DMA</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, usart_program.o(i.USART_enumSendData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_enumSendData_DMA &rArr; DMA_enumInitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_enumInitConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_enumEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumGetBaseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>USART_enumWait_TC_Flag</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart_program.o(i.USART_enumWait_TC_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_enumWait_TC_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumGetBaseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFunc2
</UL>

<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_program.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers_program.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_ld.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = main &rArr; USART_enumSendData_DMA &rArr; DMA_enumInitConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumSendData_DMA
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumRecevieData_DMA
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumInitConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_voidInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_voidEnableClock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_voidADCSetPresacaler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enumInterruptEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_enumWait_TCIF_Flag
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3]"></a>myFunc</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.myFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = myFunc &rArr; LCD_voidSendNumber &rArr; LCD_voidSendData &rArr; LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendNumber
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumTogglePinValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>myFunc2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.myFunc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myFunc2 &rArr; USART_enumWait_TC_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumWait_TC_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[52]"></a>LCD_voidSendFallinEdge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_program.o(i.LCD_voidSendFallinEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_voidSendFallinEdge &rArr; DIO_enumSetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_enumSetBusyWait
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_enumSetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_voidSendCommand
</UL>

<P><STRONG><a name="[57]"></a>USART_enumGetBaseAddress</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_program.o(i.USART_enumGetBaseAddress))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumWait_TC_Flag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumSendData_DMA
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumRecevieData_DMA
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_enumInitConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
